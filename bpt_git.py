#
#  Exported For GIT
#  Aaron I. Clay
#  1-16-2022  16:19
#

import json
import os


class ReadData:
    def __init__(self,src_path):
        self.src_path = src_path
        f = open(src_path + "/BPT.json")
        self.rText = f.read()
        f.close()

    def __print_data__(self):  # DEBUG
        print(self.rText)


class FormatData:
    Highs = {}
    Lows = {}
    Opens = {}
    Closes = {}
    DTs = {}
    Items = []

    def __init__(self, json_data):
        self.json = json_data
        vals = json.loads(json_data)
        data_raw = vals.values()
        data_pieced = []
        line_items = []
        for i in data_raw:
            data_pieced.append(i)

        target_vals = data_pieced[1]
        tm_series_opens = []
        tm_series_closes = []
        tm_series_highs = []
        tm_series_lows = []
        tm_series_dts = []
        tm_series_diff_oc = []

        for ii in target_vals:
            #  Format: {'DateTime':<DT>, 'Open':<val>} => append respective list
            dt = str("'" + ii['datetime']  + " 12:00:00'")
            opn = float(ii['open'])
            cls = float(ii['close'])
            hgh = float(ii['high'])
            lw = float(ii['low'])
            oc = float(opn - cls)
            ocf = float("{:.4f}".format(oc))
            hl = float(hgh - lw)
            lf = float("{:.4f}".format(hl))
            str_line = dt + ", " + str(opn) + ", " + str(hgh) + ", " + str(cls) + ", " + str(lw) + ", " + str(
                ocf) + ", " + str(lf)
            line_items.append(str_line)


            dco = {'DateTime':dt, 'Open': opn}
            tm_series_opens.append(dco)
            dcc = {'DateTime':dt, 'Close': cls}
            tm_series_closes.append(dcc)
            dch = {'DateTime':dt, 'High': hgh}
            tm_series_highs.append(dch)
            dcl = {'DateTime':dt, 'Low': lw}
            tm_series_lows.append(dcl)
            tm_series_dts.append(dt)



        #  To Be Returned For x, y plots -> X == DateTime  -> Y == <target_val_col>
        self.Highs = tm_series_highs
        self.Lows = tm_series_lows
        self.Opens = tm_series_opens
        self.Closes = tm_series_closes
        self.DTs = tm_series_dts
        self.Items = line_items


class GeneratePage:
    #
    # Full page to be constructed and returned / written to disk.
    #
    html_page = ""
    table_headers = ['Date Time', 'Open', 'High', 'Close', 'Low', 'Difference(o/c)', 'Difference(h/l)']

    #
    #  4 charts [Highs, Lows, Opens, Closes]
    #  Each needs X [DateTime] and Y [val points {formatted to 'i.dddd'}]
    #  The goal here is to generate 1 full page with inline styles and only linking in plotly library.
    #
    def __init__(self,highs,lows,opens,closes,dts,ln_items):
        # local variable to house constructed page
        return_html = ""

        # Single Inline Page:
        # -------------------
        # external js load: [path to file]/js/plotly-2.8.3.min.js
        # prototype reference on disk: [path to file]/styled_pg1.htm
        # target on disk: [path to file]/<filename>.htm
        # -------------------

        str_html = "<!DOCTYPE html>\n"
        str_html += "      <!-- Auto Generated by Python: Aaron I. Clay  Py3.8 -->\n"
        str_html += "     <meta charset='UTF-8' />\n"
        str_html += "     <meta language='ENGLISH' />\n"
        str_html += "     <title>Stock Symbol BPT - Prototype</title>\n"
        str_html += "     <link rel='StyleSheet' href='[path to file]/chart_styling_git.css' type='text/css' />\n"
        str_html += "     <script src='[path to file]/plotly-2.8.3.min.js'></script>\n"
        str_html += "     <script type='text/javascript'>\n"
        str_html += "     function init()\n"
        str_html += "     {\n"
        str_html += "          var t1 = {\n"

        # Open Prices

        x_valsDT = "            x: ["
        ln_dts = len(dts)
        cnt_dts = 0
        for d in range(ln_dts):
            cnt_dts += 1
            if cnt_dts < ln_dts:
                x_valsDT += str(dts[d]) + ","
            if cnt_dts >= ln_dts:
                x_valsDT += str(dts[d])

        x_valsDT += "],"
        str_html += "          " + x_valsDT + "\n"
        y_valsOP = "            y: ["
        ln_op = len(opens)
        cnt = 0
        for op in range(ln_op):
            cnt +=1
            tgt = opens[op]
            if cnt < ln_op:
                y_valsOP += str(tgt['Open']) + ","
            if cnt >= ln_op:
                y_valsOP += str(tgt['Open'])

        y_valsOP += "],"
        str_html += "          " + y_valsOP + "\n"
        str_html += "           mode: 'lines',\n"
        str_html += "           line: {color: '#376324'},\n"
        str_html += "           fill: 'tozeroy',\n"
        str_html += "           type: 'scatter'\n"
        str_html += "                   };\n"
        str_html += "           var layout={\n"
        str_html += "                   title: 'Open Prices',\n"
        str_html += "                   xaxis: {\n"
        str_html += "                       title: 'Dates'\n"
        str_html += "                           },\n"
        str_html += "                   yaxis: {\n"
        str_html += "                       title: 'Price'\n"
        str_html += "                           }\n"
        str_html += "                       };\n"

        str_html += "  \n"
        str_html += " var d1 = [t1];\n"
        str_html += " Plotly.newPlot('tOpen_wrap',d1,layout, {displayModeBar: false});\n"
        str_html += "\n"

        # Close Prices

        str_html += "          var t2 = {\n"

        x_valsDT = "x: ["
        for d in dts:
            x_valsDT += str(d + ",")

        x_valsDT += "],"
        str_html += "          " + x_valsDT + "\n"
        y_valsCL = "y: ["
        for cl in closes:
            y_valsCL += str(cl['Close']) + ","

        y_valsCL += "],"
        str_html += "          " + y_valsCL + "\n"
        str_html += "mode: 'lines',\n"
        str_html += "line: {color: '#376324'},\n"
        str_html += "fill: 'tozeroy',\n"
        str_html += "type: 'scatter'\n"
        str_html += "   };\n"
        str_html += "var layout={\n"
        str_html += "title: 'Close Prices',\n"
        str_html += "xaxis: {\n"
        str_html += "    title: 'Dates'\n"
        str_html += "    },\n"
        str_html += "yaxis: {\n"
        str_html += "    title: 'Price'\n"
        str_html += "    }\n"
        str_html += "   };\n"
        str_html += "  \n"
        str_html += " var d2 = [t2];\n"
        str_html += " Plotly.newPlot('tClose_wrap',d2,layout, {displayModeBar: false});\n"
        str_html += "\n"

        # High Prices

        str_html += "          var t3 = {\n"

        x_valsDT = "x: ["
        for d in dts:
            x_valsDT += str(d + ",")

        x_valsDT += "],"
        str_html += "          " + x_valsDT + "\n"
        y_valsHG = "y: ["
        for hg in highs:
            y_valsHG += str(hg['High']) + ","

        y_valsHG += "],"
        str_html += "          " + y_valsHG + "\n"
        str_html += "mode: 'lines',\n"
        str_html += "line: {color: '#376324'},\n"
        str_html += "fill: 'tozeroy',\n"
        str_html += "type: 'scatter'\n"
        str_html += "   };\n"
        str_html += "var layout={\n"
        str_html += "title: 'High Prices',\n"
        str_html += "xaxis: {\n"
        str_html += "    title: 'Dates'\n"
        str_html += "    },\n"
        str_html += "yaxis: {\n"
        str_html += "    title: 'Price'\n"
        str_html += "    }\n"
        str_html += "   };\n"
        str_html += "  \n"
        str_html += " var d3 = [t3];\n"
        str_html += " Plotly.newPlot('tHigh_wrap',d3,layout, {displayModeBar: false});\n"
        str_html += "\n"

        # Lows Prices

        str_html += "          var t4 = {\n"

        x_valsDT = "x: ["
        for d in dts:
            x_valsDT += str(d + ",")

        x_valsDT += "],"
        str_html += "          " + x_valsDT + "\n"
        y_valsLW = "y: ["
        for lw in lows:
            y_valsLW += str(lw['Low']) + ","

        y_valsLW += "],"
        str_html += "          " + y_valsLW + "\n"
        str_html += "mode: 'lines',\n"
        str_html += "line: {color: '#376324'},\n"
        str_html += "fill: 'tozeroy',\n"
        str_html += "type: 'scatter'\n"
        str_html += "   };\n"
        str_html += "var layout={\n"
        str_html += "title: 'Low Prices',\n"
        str_html += "xaxis: {\n"
        str_html += "    title: 'Dates'\n"
        str_html += "    },\n"
        str_html += "yaxis: {\n"
        str_html += "    title: 'Price'\n"
        str_html += "    }\n"
        str_html += "   };\n"
        str_html += "  \n"
        str_html += " var d4 = [t4];\n"
        str_html += " Plotly.newPlot('tLow_wrap',d4,layout, {displayModeBar: false});\n"
        str_html += "\n"
        str_html += "}\n"
        str_html += "</script>\n"
        str_html += "</head>\n"
        str_html += "<body onload=init(); >\n"
        str_html += "    <div id='rawData' class='rawData_wrap'>\n"
        str_html += "        <table id='tblRaw' class='tblRaw'>\n"

        str_html += "<tr>"
        for itm in self.table_headers:
            str_html += str("<th>" + itm + "</th>")

        str_html += "</tr>\n"

        for itms in ln_items:
            a = str.split(itms, ',', -1)
            # date time, open , high, low, close, dif, calc[1], calc[2]
            dt1 = a[0].split("-",-1)
            # yyyy-mm-dd
            # 0,1,2
            # 01-14 12:00:00'-'2022
            # 0 = 'yyyy'
            # 1 = 'mm'
            # 2 = 'dd hh:mm:ss'

            dt2 = dt1[2].split(" ",-1)
            # 0 = 'dd'
            dt_con = dt1[1] + "-" + dt2[0] + "-" + str(dt1[0].replace("'", ""))
            str_html += "<tr><td>" + dt_con + "</td><td>" + a[1] + "</td><td>" + a[2] + "</td><td>" + a[
                3] + "</td><td>" + a[
                             4] + "</td></tr>\n"

        str_html += "     </table>\n"
        str_html += " <span id='rwCap' class='rwCap'>Raw Data</span><span id='catS' class='catS'>Categorical Time Series</span>\n"
        str_html += "<span id='dataSauce' class='dataSauce'>*** Data Source: TwelveData.com | Historical Data | [ 12-03-2021 -- 1-14-2022 ]\n"
        str_html += "</div>\n"
        str_html += "<div id='tOpen_wrap' class='chart1_tOpen_wrap'>\n"
        str_html += "</div>\n"
        str_html += "<div id='tClose_wrap' class='chart2_tClose_wrap'>\n"
        str_html += "</div>\n"
        str_html += "<div id='tHigh_wrap' class='chart3_tHigh_wrap'>\n"
        str_html += "</div>\n"
        str_html += "<div id='tLow_wrap' class='chart4_tClose_wrap'>\n"
        str_html += "</div>\n"
        str_html += "</body>\n"
        str_html += "</html>\n"

        # print(str_html)
        self.html_page = str_html


# 1:) Get the Data - in this instance, it is a json file already on disk.
a = ReadData("[path to file]")
# 2:) Scrub / Format Data [json data]
b = FormatData(a.rText)
# 3:) Generate the Page / Display the Page
c = GeneratePage(b.Highs,b.Lows,b.Opens,b.Closes,b.DTs,b.Items)
ddd = "01162022.htm"
ff = open("[path to file]" + str(ddd), 'w')
ff.write(c.html_page)
ff.flush()
ff.close()

os.popen("firefox [path to file]" + str(ddd))





